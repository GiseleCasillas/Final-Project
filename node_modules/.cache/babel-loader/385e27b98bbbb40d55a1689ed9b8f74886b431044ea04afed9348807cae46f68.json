{"ast":null,"code":"var _jsxFileName = \"/Users/giselecasillas/my-app-v2/src/pages/ReviewPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport ReviewBox from \"./ReviewBox\";\nimport ReviewForm from \"./ReviewForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReviewPage = () => {\n  _s();\n  const [reviews, setReviews] = useState([]);\n  const [newReview, setNewReview] = useState({\n    author: \"\",\n    rating: 0,\n    content: \"\"\n  });\n  useEffect(() => {\n    // Fetch reviews when the component mounts\n    fetchReviews();\n  }, []);\n  const fetchReviews = async () => {\n    try {\n      const response = await fetch(\"your-api-endpoint/reviews\");\n      const data = await response.json();\n      setReviews(data);\n    } catch (error) {\n      console.error(\"Error fetching reviews:\", error);\n    }\n  };\n\n  // POST request to create a new review\n  const addReview = () => {\n    fetch(\"/reviews\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newReview)\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`Error adding review: ${response.statusText}`);\n      }\n      return response.json();\n    }).then(data => {\n      // Update the reviews state with the new review\n      setReviews([...reviews, data]);\n\n      // Clear the form fields\n      setNewReview({\n        author: \"\",\n        rating: 0,\n        content: \"\"\n      });\n    }).catch(error => {\n      console.error(`Error adding review: ${error.message}`);\n    });\n  };\n\n  // PUT request to update a specific review by ID\n  const updateReview = (id, updatedReview) => {\n    fetch(`/reviews/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(updatedReview)\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`Error updating review: ${response.statusText}`);\n      }\n      return response.json();\n    }).then(data => {\n      // Update the reviews state with the updated review\n      setReviews(reviews.map(review => review.id === id ? data : review));\n    }).catch(error => {\n      console.error(`Error updating review: ${error.message}`);\n    });\n  };\n\n  // DELETE request to delete a specific review by ID\n  const deleteReview = id => {\n    fetch(`/reviews/${id}`, {\n      method: \"DELETE\"\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`Error deleting review: ${response.statusText}`);\n      }\n    }).then(() => {\n      // Update the reviews state by removing the deleted review\n      setReviews(reviews.filter(review => review.id !== id));\n    }).catch(error => {\n      console.error(`Error deleting review: ${error.message}`);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Reviews\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: reviews.map(review => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(ReviewBox, {\n          author: review.author,\n          rating: review.rating,\n          content: review.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => updateReview(review.id, {\n            content: \"Updated Content\"\n          }),\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteReview(review.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this)]\n      }, review.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add a Review\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReviewForm, {\n        addReview: addReview\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(ReviewPage, \"Ldouzdyf1VooJ+lNh56bKkU4U38=\");\n_c = ReviewPage;\nexport default ReviewPage;\nvar _c;\n$RefreshReg$(_c, \"ReviewPage\");","map":{"version":3,"names":["React","useState","useEffect","ReviewBox","ReviewForm","jsxDEV","_jsxDEV","ReviewPage","_s","reviews","setReviews","newReview","setNewReview","author","rating","content","fetchReviews","response","fetch","data","json","error","console","addReview","method","headers","body","JSON","stringify","then","ok","Error","statusText","catch","message","updateReview","id","updatedReview","map","review","deleteReview","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/giselecasillas/my-app-v2/src/pages/ReviewPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ReviewBox from \"./ReviewBox\";\nimport ReviewForm from \"./ReviewForm\";\n\nconst ReviewPage = () => {\n  const [reviews, setReviews] = useState([]);\n  const [newReview, setNewReview] = useState({\n    author: \"\",\n    rating: 0,\n    content: \"\",\n  });\n\n  useEffect(() => {\n    // Fetch reviews when the component mounts\n    fetchReviews();\n  }, []);\n\n  const fetchReviews = async () => {\n    try {\n      const response = await fetch(\"your-api-endpoint/reviews\");\n      const data = await response.json();\n      setReviews(data);\n    } catch (error) {\n      console.error(\"Error fetching reviews:\", error);\n    }\n  };\n\n  // POST request to create a new review\n  const addReview = () => {\n    fetch(\"/reviews\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(newReview),\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`Error adding review: ${response.statusText}`);\n        }\n        return response.json();\n      })\n      .then((data) => {\n        // Update the reviews state with the new review\n        setReviews([...reviews, data]);\n\n        // Clear the form fields\n        setNewReview({\n          author: \"\",\n          rating: 0,\n          content: \"\",\n        });\n      })\n      .catch((error) => {\n        console.error(`Error adding review: ${error.message}`);\n      });\n  };\n\n  // PUT request to update a specific review by ID\n  const updateReview = (id, updatedReview) => {\n    fetch(`/reviews/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(updatedReview),\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`Error updating review: ${response.statusText}`);\n        }\n        return response.json();\n      })\n      .then((data) => {\n        // Update the reviews state with the updated review\n        setReviews(reviews.map((review) => (review.id === id ? data : review)));\n      })\n      .catch((error) => {\n        console.error(`Error updating review: ${error.message}`);\n      });\n  };\n\n  // DELETE request to delete a specific review by ID\n  const deleteReview = (id) => {\n    fetch(`/reviews/${id}`, {\n      method: \"DELETE\",\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`Error deleting review: ${response.statusText}`);\n        }\n      })\n      .then(() => {\n        // Update the reviews state by removing the deleted review\n        setReviews(reviews.filter((review) => review.id !== id));\n      })\n      .catch((error) => {\n        console.error(`Error deleting review: ${error.message}`);\n      });\n  };\n\n  return (\n    <div>\n      <h1>Reviews</h1>\n      <ul>\n        {reviews.map((review) => (\n          <li key={review.id}>\n            <ReviewBox\n              author={review.author}\n              rating={review.rating}\n              content={review.content}\n            />\n\n            {/* Button to update a review */}\n            <button\n              onClick={() =>\n                updateReview(review.id, { content: \"Updated Content\" })\n              }\n            >\n              Update\n            </button>\n\n            {/* Button to delete a review */}\n            <button onClick={() => deleteReview(review.id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n      {/* Form to add a new review */}\n      <div>\n        <h2>Add a Review</h2>\n        <ReviewForm addReview={addReview} />\n      </div>\n    </div>\n  );\n};\n\nexport default ReviewPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}